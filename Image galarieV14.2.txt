<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Gallery</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            text-align: center;
        }
        .filter-buttons {
            margin-bottom: 20px;
        }
        .filter-buttons button {
            margin: 5px;
            padding: 10px 15px;
            cursor: pointer;
        }
        .gallery {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
        .gallery-item {
            border: 1px solid #ccc;
            padding: 10px;
            margin: 10px;
            width: 250px;
            text-align: center;
            display: block;
            position: relative;
        }
        .gallery-item img {
            width: 100%;
            height: auto;
        }
        .delete-button {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: red;
            color: white;
            border: none;
            cursor: pointer;
            padding: 5px;
        }
    </style>
</head>
<body>
    <h1>Image Gallery</h1>
    <input type="file" id="imageUpload" accept="image/*">
    <select id="categorySelect">
        <option value="">Select or Add Category</option>
    </select>
    <input type="text" id="imageCategory" placeholder="Enter new category">
    <input type="text" id="imageDescription" placeholder="Enter description">
    <button onclick="addImage()">Add Image</button>
    <button onclick="generatePDFDocument()">Generate PDF Document</button>
    <button onclick="exportGallery()">Save Gallery</button>
    <button onclick="importGallery()">Load Gallery</button>
    <button onclick="clearGallery()">Clear All</button>
    
    <div class="filter-buttons" id="category-buttons">
        <button onclick="filterImages('all')">Show All</button>
    </div>
    <div class="gallery" id="gallery"></div>

    <script>
        let images = JSON.parse(localStorage.getItem("images")) || [];
        let categories = new Set(images.map(img => img.category));

        function loadGallery() {
            const gallery = document.getElementById("gallery");
            gallery.innerHTML = "";
            
            if (images.length === 0) {
                gallery.innerHTML = "<p>No images found. Add some!</p>";
                return;
            }

            images.forEach((image, index) => {
                const item = document.createElement("div");
                item.classList.add("gallery-item");
                item.setAttribute("data-category", image.category);
                item.innerHTML = `
                    <button class="delete-button" onclick="deleteImage(${index})">X</button>
                    <img src="${image.src}" alt="Image ${index + 1}">
                    <p>${image.description}</p>
                `;
                gallery.appendChild(item);
            });

            updateCategoryButtons();
            updateCategoryDropdown();
        }

        function updateCategoryDropdown() {
            const categorySelect = document.getElementById("categorySelect");
            categorySelect.innerHTML = '<option value="">Select or Add Category</option>';
            categories = new Set(images.map(img => img.category));
            categories.forEach(category => {
                const option = document.createElement("option");
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });
        }

        function updateCategoryButtons() {
            const buttonContainer = document.getElementById("category-buttons");
            buttonContainer.innerHTML = '<button onclick="filterImages(\'all\')">Show All</button>';
            categories = new Set(images.map(img => img.category));
            categories.forEach(category => {
                const button = document.createElement("button");
                button.textContent = category;
                button.onclick = () => filterImages(category);
                buttonContainer.appendChild(button);
            });
        }

        function filterImages(category) {
            const items = document.querySelectorAll('.gallery-item');
            items.forEach(item => {
                if (category === 'all' || item.getAttribute('data-category') === category) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        function addImage() {
            const fileInput = document.getElementById("imageUpload");
            const categorySelect = document.getElementById("categorySelect");
            const categoryInput = document.getElementById("imageCategory").value.trim();
            const descriptionInput = document.getElementById("imageDescription").value.trim();
            let selectedCategory = categorySelect.value || categoryInput;
            
            if (fileInput.files.length === 0 || !selectedCategory || !descriptionInput) {
                alert("Please provide an image, category, and description.");
                return;
            }
            
            const file = fileInput.files[0];
            const reader = new FileReader();
            reader.onload = function(event) {
                const newImage = { src: event.target.result, category: selectedCategory, description: descriptionInput };
                images.push(newImage);
                categories.add(selectedCategory);
                localStorage.setItem("images", JSON.stringify(images));
                loadGallery();
            };
            reader.readAsDataURL(file);
            
            fileInput.value = "";
            document.getElementById("imageCategory").value = "";
            document.getElementById("imageDescription").value = "";
        }

        function deleteImage(index) {
            images.splice(index, 1);
            localStorage.setItem("images", JSON.stringify(images));
            loadGallery();
        }

        function exportGallery() {
            if (images.length === 0) {
                alert("No images to save.");
                return;
            }
            localStorage.setItem("images", JSON.stringify(images));
            alert("Gallery saved successfully!");
        }

        function importGallery() {
            const storedImages = localStorage.getItem("images");

            if (!storedImages || JSON.parse(storedImages).length === 0) {
                alert("No saved gallery found.");
                return;
            }

            images = JSON.parse(storedImages);
            loadGallery();
            alert("Gallery loaded successfully!");
        }

        function clearGallery() {
            if (confirm("Are you sure you want to clear the entire gallery? This action cannot be undone.")) {
                localStorage.removeItem("images");
                images = [];
                loadGallery();
                alert("Gallery cleared!");
            }
        }

        function generatePDFDocument() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({ orientation: 'landscape' });
            
            images.forEach((image, index) => {
                if (index > 0) {
                    doc.addPage();
                }
                doc.setFontSize(16);
                doc.text(image.category, 10, 20);
                const img = new Image();
                img.src = image.src;
                doc.addImage(img, 'JPEG', 10, 30, 160, 90);
                doc.setFontSize(12);
                doc.text(image.description, 10, 130);
            });
            doc.save("Image_Gallery.pdf");
        }

        loadGallery();
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
</body>
</html>
